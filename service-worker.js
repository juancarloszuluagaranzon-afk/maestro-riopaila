// ‚úÖ service-worker.js
// Versi√≥n actual ‚Äî CAMBIA este n√∫mero cada vez que actualices archivos en el repo
const CACHE_VERSION = 'v1.7.1';
const CACHE_NAME = `riopaila-maestro-${CACHE_VERSION}`;

// ‚úÖ Archivos a cachear
const urlsToCache = [
  '/',             // P√°gina principal
  '/index.html',
  '/maestro.html',
  '/icon-192.png',
  '/icon-512.png',
  '/manifest.json'
  // ‚ùå No incluyas el CSV, as√≠ siempre se carga fresco del servidor
];

// ‚úÖ Instalaci√≥n
self.addEventListener('install', event => {
  console.log('Instalando nueva versi√≥n del SW:', CACHE_VERSION);
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => cache.addAll(urlsToCache))
      .then(() => self.skipWaiting())
  );
});

// ‚úÖ Activaci√≥n ‚Äî limpia versiones antiguas
self.addEventListener('activate', event => {
  console.log('Activando versi√≥n:', CACHE_VERSION);
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(name => {
          if (name !== CACHE_NAME) {
            console.log('üßπ Eliminando cach√© antigua:', name);
            return caches.delete(name);
          }
        })
      );
    }).then(() => self.clients.claim())
  );
});

// ‚úÖ Estrategia de red
self.addEventListener('fetch', event => {
  const url = new URL(event.request.url);

  // Para CSV siempre red primero (no usar cach√©)
  if (url.pathname.endsWith('.csv')) {
    event.respondWith(
      fetch(event.request).catch(() => caches.match(event.request))
    );
    return;
  }

  // Para los dem√°s, cache-first con fallback
  event.respondWith(
    caches.match(event.request)
      .then(response => response || fetch(event.request))
  );
});

// ‚úÖ Permitir actualizaci√≥n inmediata
self.addEventListener('message', event => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('‚ö° Activando nueva versi√≥n del SW inmediatamente...');
    self.skipWaiting();
  }
});
